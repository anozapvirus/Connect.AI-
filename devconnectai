#!/bin/bash

# Reset shell colors
tput init

# Determina o diretório do script
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$PROJECT_ROOT/$SOURCE"
done
PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# Defina o diretório de instalação visível
INSTALL_DIR="/opt/whaticket"
mkdir -p "${INSTALL_DIR}"
chown "$USER:$USER" "${INSTALL_DIR}"
chmod 755 "${INSTALL_DIR}"

# Importações necessárias
source "${PROJECT_ROOT}/variables/manifest.sh"
source "${PROJECT_ROOT}/utils/manifest.sh"
source "${PROJECT_ROOT}/lib/manifest.sh"

# Arquivo de configuração do usuário
CONFIG_FILE="${INSTALL_DIR}/config"
if [[ ! -e "${CONFIG_FILE}" ]]; then
  cat << EOF > "${CONFIG_FILE}"
deploy_password=${deploy_password}
postgres_user=${postgres_user}
postgres_password=${postgres_password}
db_name=${db_name}
EOF
fi

# Protege o arquivo de configuração
sudo chown root:root "${CONFIG_FILE}"
sudo chmod 600 "${CONFIG_FILE}"

source "${CONFIG_FILE}"

# CLI interativa
inquiry_options

# Atualização de dependências
system_update
system_set_timezone
system_set_ufw
system_node_install
system_pm2_install
system_docker_install
system_puppeteer_dependencies
system_snapd_install
system_nginx_install
system_certbot_install

# Configuração do sistema
system_create_user
system_execute_comand

# Backend
system_unzip_whaticket "${INSTALL_DIR}"
backend_chrome_install
backend_set_env
backend_redis_create
backend_node_dependencies

# Instalação do PostgreSQL
sudo apt update
sudo apt install -y postgresql postgresql-contrib
sudo -u postgres createuser --interactive
sudo -u postgres createdb "${db_name}"

# Migrações e inicializações do banco de dados
backend_db_migrate
backend_db_seed
backend_start_pm2

# Frontend
frontend_set_env
frontend_node_dependencies
frontend_start_pm2

# Configuração de rede
system_nginx_conf
system_nginx_restart
system_certbot_setup
